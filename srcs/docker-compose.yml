services:

  nginx:
    container_name: nginx
    image: nginx
    build:
      context: ./requirements/nginx
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "443:443"
    networks:
      - proxy
    depends_on:
      - mariadb
      - wordpress
      - ftp
      - redis
      - adminer
      - gatsby-app
      - alien-eggs
      - prometheus
      - grafana
      - cadvisor
    volumes:
      - wp-data:/var/www/html
    restart: on-failure
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mariadb:
    container_name: mariadb
    image: mariadb
    build:
      context: ./requirements/mariadb
    env_file:
      - .env
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend-db
    restart: on-failure
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
  wordpress:
    container_name: wordpress
    image: wordpress
    env_file:
      - .env
    build:
      context: ./requirements/wordpress
      dockerfile: Dockerfile
    volumes:
      - wp-data:/var/www/html
    networks:
      - backend-db
      - proxy
      - cache
    depends_on:
      - mariadb
    restart: on-failure
    healthcheck:
      test: ["CMD", "php-fpm82", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  ### BONUS ###

  adminer:
    container_name: adminer
    image: adminer
    build:
      context: ./requirements/bonus/adminer
      dockerfile: Dockerfile
    env_file:
      - .env
    networks:
      - backend-db
      - proxy
    restart: on-failure
    depends_on:
      - mariadb
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    container_name: redis
    image: redis
    build:
      context: ./requirements/bonus/redis
      dockerfile: Dockerfile
    volumes:
      - wp-data:/var/www/html
    networks:
      - cache
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  ftp:
    container_name: ftp
    image: ftp
    build:
      context: ./requirements/bonus/ftp
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "20:20"
      - "21:21"
      - "21100-21110:21100-21110"
    volumes:
      - wp-data:/var/www/html
    networks:
      - proxy
    restart: on-failure
    healthcheck:
      test: ["CMD", "netstat", "-ln", "|", "grep", ":21"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  gatsby-app:
    container_name: gatsby-app
    image: gatsby-app
    build: 
      context: ./requirements/bonus/gatsby-app
      dockerfile: Dockerfile
    networks:
      - proxy
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  alien-eggs:
    container_name: alien-eggs
    image: alien-eggs
    build:
      context: ./requirements/bonus/alien-eggs
      dockerfile: Dockerfile
    networks:
      - proxy
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:8060"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  ### MONITORING ###

  cadvisor:
    container_name: cadvisor
    image: cadvisor
    build:
      context: ./requirements/bonus/monitoring/cadvisor
      dockerfile: Dockerfile
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    networks:
      - monitoring
      - proxy
    restart: on-failure
    privileged: true
    devices: 
      - "/dev/kmsg:/dev/kmsg:rw"
    group_add:
      - docker
    security_opt:
      - apparmor:unconfined
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/cadvisor/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  prometheus:
    container_name: prometheus
    image: prometheus
    build:
      context: ./requirements/bonus/monitoring/prometheus
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - prometheus-data:/prometheus/data
    networks:
      - monitoring
      - proxy
    restart: on-failure
    healthcheck:
      test: 
        - CMD
        - wget
        - --no-verbose
        - --tries=1
        - --spider
        - --auth-no-challenge
        - --user=admin
        - --password=${PROMETHEUS_PASSWORD}
        - http://localhost:9090/-/healthy
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  grafana:
    container_name: grafana
    image: grafana
    build:
      context: ./requirements/bonus/monitoring/grafana
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monitoring
      - proxy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

# Networks configuration
networks:
  backend-db:
    driver: bridge
  proxy:
    driver: bridge
  cache:
    driver: bridge
  monitoring:
    driver: bridge

# Volumes
volumes:

  wp-data:
    driver: local
    driver_opts:
      type: none
      device: ${HOME}/data/wordpress
      o: bind

  db-data:
    driver: local
    driver_opts:
      type: none
      device: ${HOME}/data/mariadb
      o: bind

  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: ${HOME}/data/prometheus
      o: bind
      
  grafana-data:
    driver: local
    driver_opts:
      type: none
      device: ${HOME}/data/grafana
      o: bind